#!/usr/bin/env ruby

require 'rubygems'
require 'thor'
require 'yaml'
#
# ~/.gvnrc
#
# repository: /repos/product_hoge
# path:       [module_A, module_B]
# ignore:     [.*\.(dll|exe|zip)]
#
module Gvn
  class Command < Thor
    #
    # update
    #
    desc "udpate", "update from repository"
    method_option :update, :alias => 'u'
    def update
      Context.exec do |rc|
        puts "update #{rc.path}"
        system("svn update #{rc.path}")
        puts ""
      end
    end
    #
    # status
    #
    desc "status", "show working status"
    method_option :status, :alias => 's'
    def status
      Context.exec do |rc|
        `svn status #{rc.path}`.each_line do |line|
          status = Status.new(line)
          next if rc.ignore?(status)
          puts line
        end
      end
    end
    #
    # add
    #
    desc "add", "add files"
    method_option :add, :alias => 'a'
    def add(file)
      if file != '.'
        puts `svn add #{file}` 
        return
      end
      # add targets
      targets = []
      Context.exec do |rc|
        `svn status #{rc.path}`.each_line do |line|
          status = Status.new(line)
          next if rc.ignore?(status)
          next unless status.noversion?
          targets << status 
        end
      end
      # no targets
      return if targets.empty?
      # check targets
      targets.each {|status| puts status.path }
      print "add these files? (y/n) : "
      return unless STDIN.gets.chomp == 'y'
      # add files
      targets.each do |status|
        puts `svn add #{status.path}`
      end
    end
    #
    # commit
    #
    desc "commit", "commit files"
    method_option :commit, :alias => 'c'
    def commit
      targets = []
      Context.exec do |rc|
        `svn status #{rc.path}`.each_line do |line|
          status = Status.new(line)
          next if rc.ignore?(status) || status.noversion?
          targets << status.path
        end
      end
      system("svn commit #{targets.join(' ')}")
    end
  end
end

module Gvn
  class Context
    def self.exec
      rc = Gvnrc.new
      rc.all_path.each do |path|
        rc.path = path
        yield rc
      end
    end
  end
end

module Gvn
  class Gvnrc
    attr_accessor :path
    def initialize
      path  = File.expand_path('~/.gvnrc')
      if File.exist? path
        @yaml = YAML.load(File.open(path, &:read))
      else
        @yaml = {}
      end
    end

    def all_path
      @yaml["path"] ? @yaml["path"] : '.'
    end

    def ignore?(status)
      return unless @yaml["ignore"]
      @yaml["ignore"].each do |reg|
        status.path =~ /#{reg}/
      end
    end
  end
end

module Gvn
  class Status
    attr_reader :type, :path

    def initialize(line)
      @type, @path = line.split(" ", 2).map {|v| v.chomp}
    end

    def noversion?
      @type == '?'
    end
  end
end

Gvn::Command.start
